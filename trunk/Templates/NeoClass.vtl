//------------------------------------------------------------------------
// Generated by Neo on $Neo.Date for $Neo.User
//
// This file was autogenerated but you can (and are meant to) edit it as 
// it will not be overwritten unless explicitly requested.
//------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using Neo.Core;
using Expergent;
#foreach($ns in $entity.UsedNamespaces)
#if($ns != $entity.Namespace)
using $ns;
#end
#end


#if( $Neo.Entity.Namespace )
namespace ${Neo.Entity.Namespace}.Models
{
#end

#region ${Neo.Entity.ClassName}

/// <summary>Basic entity object representing a database table.</summary>
/// <remarks>
///   <para>Database Path: ${Neo.Entity.Model.Name}.${Neo.Entity.TableName}.</para>
/// </remarks>
public partial class $Neo.Entity.ClassName
{  
    /// <summary>Use this method to establish the default value of a property upon creation.</summary>
    [LifecycleCreate()]
    protected void SetupAfterCreate()
    {
        //pass
    }
    
    /// <summary>
    /// Invokes the method.
    /// </summary>
    /// <param name="methodName">Name of the method.</param>
    /// <param name="parameters">The parameters.</param>
    public override object InvokeMethod(string methodName, params object[] parameters)
    {
        //Use this to implement rule actions.
        return base.InvokeMethod(methodName, parameters);
    }
    
    /// <summary>
    /// Extends the GetProperty method to allow the developer to add custom properties.
    /// </summary>
    /// <param name="propName">Name of the prop.</param>
    /// <returns>The property value.</returns>
    protected override object ExtendGetProperty(string propName)
    {
        return base.GetProperty(propName); 
    }

    /// <summary>
    /// Extends the SetProperty method to allow the developer to add custom properties.
    /// </summary>
    /// <param name="propName">Name of the prop.</param>
    /// <param name="propValue">The prop value.</param>
    protected override void ExtendSetProperty(string propName, object propValue)
    {
        base.SetProperty(propName, propValue);
    }

    /// <summary>
    /// Extends the MakeFacts method to create custom facts.
    /// </summary>
    /// <param name="list">The list.</param>
    /// <param name="parent">The parent.</param>
    protected override void ExtendMakeFacts(List<WME> list, string parent)
    {
        
    }
        
    /// <summary>Use this method to return a meaningful string representation of your object.</summary>
    public override string ToString()
    {
#if(!${Neo.Entity.DefaultProperty} || ${Neo.Entity.DefaultProperty} == "")
        return base.ToString();
#else
        return this.${Neo.Entity.DefaultProperty}.ToString();
#end
    }
}
#endregion

#region ${Neo.Entity.ClassName}Surrogate

/// <summary>Represents an entity object disconnected from the database.</summary>
/// <remarks>
///   <para>Database Path: ${Neo.Entity.Model.Name}.${Neo.Entity.TableName}.</para>
/// </remarks>
[Serializable]
public class ${Neo.Entity.ClassName}Surrogate : ${Neo.Entity.ClassName}SurrogateBase
{

    System.Text.StringBuilder _sb;
    
    /// <summary>Default constructor.</summary>
    public ${Neo.Entity.ClassName}Surrogate()
    {
        _sb = new System.Text.StringBuilder();
    }

	/// <summary>Constructor for assembling a surrogate from an entity object.</summary>
	/// <param name="entity">The Entity Object.</param>
    public ${Neo.Entity.ClassName}Surrogate(${Neo.Entity.ClassName} entity) : base(entity)
    {
        _sb = new System.Text.StringBuilder();
    }

    /// <summary>
    /// Determines whether this instance is valid.
    /// </summary>
    /// <returns>
    /// 	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
    /// </returns>
    public override bool IsValid()
    {
        return _sb.Length == 0;
    }
    
    
    /// <summary>
    /// Gets the validation message.
    /// </summary>
    /// <value>The validation message.</value>
    public override String ValidationMessage
    {
        get {return _sb.ToString();}
    }


    /// <summary>Use this method to return a meaningful string representation of your object.</summary>
    public override string ToString()
    {
#if(!${Neo.Entity.DefaultProperty} || ${Neo.Entity.DefaultProperty} == "")
        return base.ToString();
#else
        return this.${Neo.Entity.DefaultProperty}.ToString();
#end
    }
}
#endregion

#if( $Neo.Model.Namespace )
}
#end

 	
